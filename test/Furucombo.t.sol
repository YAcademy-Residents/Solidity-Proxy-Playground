// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";
import "forge-std/console.sol";

import {ExampleProxy} from "../src/FurucomboMock/FurucomboProxy.sol";
import {Registry} from "../src/FurucomboMock/FurucomboLogic.sol";
import {InitializableImmutableAdminUpgradeabilityProxy} from "../src/FurucomboMock/AaveProxy.sol";
import {AdminUpgradeabilityProxy} from "../src/FurucomboMock/AaveLogic.sol";

interface IRegistry {
	function register(address registration, bytes32 info) external;

	function getmsgSender() external view virtual returns (address payable);

	function owner() external view returns (address);

    function infos(address) external view returns (bytes32);

    function isValid(address handler) external view returns (bool result);
}

contract FurucomboTest is Test {
    // These contracts are from https://solidity-by-example.org/hacks/delegatecall/
    ExampleProxy public furucomboProxy;
    Registry public furucomboLogic;
    InitializableImmutableAdminUpgradeabilityProxy public aaveProxy;
	AdminUpgradeabilityProxy public aaveLogic;
	// bytes32 public constant owner = 0xdead;

    function setUp() public {
        // Vulnerable versions of contracts
		vm.startPrank(address(0xdead));
        furucomboLogic = new Registry();
		furucomboProxy = new ExampleProxy(address(furucomboLogic));
		aaveProxy = new InitializableImmutableAdminUpgradeabilityProxy(msg.sender);
		vm.stopPrank();
		// aaveLogic = new AdminUpgradeabilityProxy();
    }
/** 
	function testMock() public {
		console.logString("furu logic owner:");
		vm.startPrank(address(0xdead));
		console.logAddress(furucomboLogic.owner()); // BEWARE: owner is NOT set when called via proxy
		console.logAddress(IRegistry(address(furucomboProxy)).owner()); // BEWARE: owner is NOT set when called via proxy
		console.logString("address(this):");
		console.logAddress(address(this));
		console.logAddress(furucomboLogic.getmsgSender());
		console.logAddress(IRegistry(address(furucomboProxy)).getmsgSender());
		IRegistry(address(furucomboProxy)).register(address(aaveProxy), '1');
		vm.stopPrank();
	}

    function testLibDoSomething() public {
		bytes32 REGISTERED = bytes10(0x72656769737465726564);
		furucomboLogic.register(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9, REGISTERED);

		int[] memory data = new int[](1);
		data[0] = int(50);

		address aaveAddress = address(aaveProxy);
		address[] memory addrParameter = new address[](1);
		addrParameter[0] = aaveAddress;

		bytes32 configBytes = 0x0000000000000000000000000000000000000000000000000000000000000000;
		bytes32[] memory configs = new bytes32[](1);
		configs[0] = configBytes;

		//bytes memory dataBytes = bytes('0x12487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000078bc49be7bae5e0eec08780c86f0e8278b8b035b000000000000000000000000b624e2b10b84a41687caec94bdd484e48d76b2120000000000000000000000000000000000000000000000d5cd783ab299c27c8800000000000000000000000000000000000000000000000000000000');
		bytes[] memory datas = new bytes[](1);
		// datas[0] = "0x12487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000078bc49be7bae5e0eec08780c86f0e8278b8b035b000000000000000000000000b624e2b10b84a41687caec94bdd484e48d76b2120000000000000000000000000000000000000000000000d5cd783ab299c27c8800000000000000000000000000000000000000000000000000000000";
		// datas[0] = hex"12487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000078bc49be7bae5e0eec08780c86f0e8278b8b035b000000000000000000000000b624e2b10b84a41687caec94bdd484e48d76b2120000000000000000000000000000000000000000000000d5cd783ab299c27c8800000000000000000000000000000000000000000000000000000000";

		// furucomboProxy.execs(addrParameter, configs, datas);
        // libContract.doSomething(42);
        // assertTrue(libContract.someNumber() == 42);
    }
*/
}
