// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

// Contract based on code generated by OpenZeppelin Wizard
// https://docs.openzeppelin.com/contracts/4.x/wizard

import "openzeppelin-contracts/contracts/proxy/utils/Initializable.sol";
import "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol";
import "openzeppelin-contracts/contracts/access/Ownable.sol";

contract SimpleTokenFixed is Initializable, ERC20, Ownable, UUPSUpgradeable {

	constructor() ERC20("SimpleToken", "STK") {
		initialize();
    }

    function initialize() initializer public {
		_transferOwnership(_msgSender()); // copied from Ownable constructor
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

	function fortytwo(address to, uint256 amount) external pure returns (uint256) {
        return 42;
    }

    ///@dev Only owner can call upgrade
    function _authorizeUpgrade(address newImplementation)
        internal
        onlyOwner
        override
    {}

}